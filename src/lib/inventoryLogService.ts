
'use server';

import { db } from "@/lib/firebase";
import { doc, runTransaction, FieldValue } from "firebase/firestore";
import type { InventoryMovement, DailyMovementLog } from "@/lib/types";
import { format } from "date-fns";

// Utility to generate a unique ID for each movement event
function generateEventId(): string {
  return `${Date.now().toString()}-${Math.random().toString(36).substring(2, 9)}`;
}

interface LogMovementData extends Omit<InventoryMovement, 'eventId' | 'recordedAt'> {
  // eventId and recordedAt will be generated by the service
}

export async function logInventoryMovement(movementData: LogMovementData): Promise<void> {
  const todayStr = format(new Date(), "yyyy-MM-dd");
  const dailyLogDocRef = doc(db, "dailyMovementLogs", todayStr);
  const currentTimestamp = new Date().toISOString();

  const newMovementEvent: InventoryMovement = {
    ...movementData,
    eventId: generateEventId(),
    recordedAt: currentTimestamp,
  };

  try {
    await runTransaction(db, async (transaction) => {
      const dailyLogDoc = await transaction.get(dailyLogDocRef);

      if (!dailyLogDoc.exists()) {
        // Create new daily log document
        const newDailyLog: DailyMovementLog = {
          id: todayStr,
          date: todayStr,
          movements: [newMovementEvent],
          lastUpdated: currentTimestamp,
        };
        transaction.set(dailyLogDocRef, newDailyLog);
      } else {
        // Append to existing daily log document
        // Firestore's arrayUnion adds elements if they aren't already present.
        // Since eventId is unique, this effectively appends.
        transaction.update(dailyLogDocRef, {
          movements: FieldValue.arrayUnion(newMovementEvent),
          lastUpdated: currentTimestamp,
        });
      }
    });
  } catch (error) {
    console.error("Error logging inventory movement: ", error);
    // Depending on the calling context, you might want to re-throw or handle more gracefully
    throw new Error("Failed to log inventory movement.");
  }
}
